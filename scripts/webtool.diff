--- webtool.py.orig	2023-01-24 16:26:37.646945000 +0100
+++ webtool.py	2023-01-24 16:34:13.304543000 +0100
@@ -92,7 +92,7 @@
     #go through transcript and get start first exon = start_genomic_region and last exon = end_genomic_region
     for transcript in transcripts:
         y += 20
-        statement = "SELECT e.start, e.end from has_exon as h, transcripts as t, exons as e WHERE e.id=h.exon AND h.transcript==t.id and t.transcript_id==?"
+        statement = "SELECT e.start, e.end from transcripts as t, exons as e WHERE e.transcript==t.id and t.transcript_id==?"
         res = cur.execute(statement, (transcript,))
         exons = res.fetchall()
         if (exons[0][0]) < start_genomic_region:
@@ -111,7 +111,7 @@
     cur = con.cursor()
 
     #database statement
-    statement = "SELECT e.start, e.end, e.chrom, e.strand from has_exon as h, transcripts as t, exons as e WHERE e.id=h.exon AND h.transcript==t.id and t.transcript_id==?"
+    statement = "SELECT e.start, e.end, e.chrom, e.strand from transcripts as t, exons as e WHERE e.transcript==t.id and t.transcript_id==?"
     res = cur.execute(statement, (transcript_id,))
     exons = res.fetchall()
     return exons
@@ -405,7 +405,7 @@
         #get bed file and match this with genome fasta to get cDNA 
             
         #to do this get exon structure of transcript
-        statement_get_exon_structure = "SELECT e.chrom, e.start, e.end from has_exon as h, transcripts as t, exons as e WHERE e.id=h.exon AND h.transcript==t.id and t.transcript_id==? ORDER BY t.transcript_id"
+        statement_get_exon_structure = "SELECT e.chrom, e.start, e.end from transcripts as t, exons as e WHERE e.transcript==t.id and t.transcript_id==? ORDER BY t.transcript_id"
         con = create_connection("../analysis/stringtie.db")
         cur = con.cursor()
         res = cur.execute(statement_get_exon_structure, [current_transcript])
@@ -463,7 +463,7 @@
     :return df
     """
     ###not finished
-    statement = "SELECT DISTINCT t.gene_id, t.gene_name, t.transcript_id, t.ref_gene_id FROM transcripts as t, exons as e, has_exon as has WHERE t.id=has.transcript AND e.start>=? AND e.end<=? AND e.chrom=? AND e.strand=? AND has.exon = e.id"
+    statement = "SELECT DISTINCT t.gene_id, t.gene_name, t.transcript_id, t.ref_gene_id FROM transcripts as t, exons as e WHERE t.id=e.transcript AND e.start>=? AND e.end<=? AND e.chrom=? AND e.strand=?"
     con = create_connection("../analysis/stringtie.db")
     cur = con.cursor()
     res = cur.execute(statement,(start,stop,chrom,strand))
@@ -516,7 +516,7 @@
     number_exons = [] 
     for transcript in transcripts: #for each transcript get length, number of exons, start, stop
         #reused code from get exon structure callback to get exon structure information about transcripts
-        statement_get_exon_structure = "SELECT h.sequence_number, e.start, e.end from has_exon as h, transcripts as t, exons as e WHERE e.id=h.exon AND h.transcript==t.id and t.transcript_id==?"
+        statement_get_exon_structure = "SELECT e.sequence_number, e.start, e.end from transcripts as t, exons as e WHERE e.transcript==t.id and t.transcript_id==?"
         cur = con.cursor()
         res = cur.execute(statement_get_exon_structure, (transcript,))
         df = pd.DataFrame(res.fetchall())
@@ -951,7 +951,7 @@
     """ 
     Callback function to get exon informations from a transcript_id
     """
-    statement_get_exon_structure = "SELECT h.sequence_number, e.chrom, e.start, e.end, e.strand from has_exon as h, transcripts as t, exons as e WHERE e.id=h.exon AND h.transcript==t.id and t.transcript_id==?"
+    statement_get_exon_structure = "SELECT e.sequence_number, e.chrom, e.start, e.end, e.strand from transcripts as t, exons as e WHERE e.transcript==t.id and t.transcript_id==?"
     
     if input_value is None:
         raise exceptions.PreventUpdate
@@ -980,7 +980,7 @@
     """
     Callback function to get all transcripts that have exon which lays within or overlaps genomic region
     """
-    statement = "SELECT DISTINCT t.gene_id, t.gene_name, t.transcript_id, t.ref_gene_id FROM transcripts as t, exons as e, has_exon as has WHERE t.id=has.transcript AND e.start>=? AND e.end<=? AND e.chrom=? AND e.strand=? AND has.exon = e.id"
+    statement = "SELECT DISTINCT t.gene_id, t.gene_name, t.transcript_id, t.ref_gene_id FROM transcripts as t, exons as e WHERE t.id=e.transcript AND e.start>=? AND e.end<=? AND e.chrom=? AND e.strand=?"
     if (n_clicks is None) or (n_clicks == 0):
         return (no_update, no_update, '')
     if n_clicks is not None:
